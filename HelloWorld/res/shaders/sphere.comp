#version 460 core
#define M_PI 3.1415926535897932384626433832795

layout(local_size_x = 16,local_size_y = 16,local_size_z = 1) in;
layout(rgba16f) uniform image2D image;


layout(std430, binding = 0) readonly restrict buffer Object
{
    float _position[256][3];
	float _radius[256];
	float _color[256][3];
};
uniform int nSphere;

uniform float vFov;

struct Ray {
	vec3 origin;
	vec3 direction;
};

struct Sphere {
	vec3 position;
	float radius;
	vec3 color;
};

shared Sphere spheres[256];

float norm2(vec3 u) {
	return u.x*u.x+u.y*u.y+u.z*u.z;
}

bool hitSphere(Ray ray, Sphere sphere) {
	float dotP = dot(sphere.position-ray.origin, ray.direction);
	float d2 = norm2(sphere.position-ray.origin);
	
	return dotP*dotP>=d2-sphere.radius*sphere.radius;
}

float intersectSphere(Ray ray, Sphere sphere) {
	float h = dot(sphere.position-ray.origin, ray.direction);
	float d2 = norm2(sphere.position-ray.origin)-sphere.radius*sphere.radius;
	
	float delta = h*h-d2;
	return delta >= 0 ? h-sqrt(delta) : -1;
}

vec3 normalSphere(Sphere sphere, Ray ray, float dist) {
	vec3 intersectPosition = ray.origin + dist*ray.direction;
	vec3 normal = (sphere.position-intersectPosition)/sphere.radius;
	return normal;
}

vec3 BRDF(Sphere sphere, vec3 normal, vec3 lightDirection) {
	return sphere.color*max(dot(normal,lightDirection),0);
}

vec3 cvtFloat3(float vector[3]) {
	return vec3(vector[0],vector[1],vector[2]);
}

void main()
{
	vec3 mainDirection = vec3(1,0,0);
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	float aspect = float(imageSize(image).x)/float(imageSize(image).y);
	vec2 screenPos = vec2(pixelCoords)/imageSize(image) * 2.0 - 1.0;

	ivec2 localID = ivec2(gl_LocalInvocationID.xy);

	int index = localID.x+16*localID.y;
	spheres[index].position = cvtFloat3(_position[index]);
	spheres[index].radius = _radius[index];
	spheres[index].color = cvtFloat3(_color[index]);

	memoryBarrierShared();
	barrier();

	float scale = tan(vFov / 2.0);
	float x = screenPos.x * aspect * scale;
	float y = screenPos.y * scale;

	Ray ray;
	ray.origin = vec3(0);
	ray.direction = normalize(vec3(1.0, y, x));
	vec3 lightDirection = normalize(vec3(1,0,0));

	float depth = 1000.f;
	vec3 pixelColor = vec3(0);
	for(int i = 0; i < nSphere; i++) {
		Sphere sphere = spheres[i];
		float dist = intersectSphere(ray, spheres[i]);
		bool hit = dist > 0 && dist < depth;
		depth = hit? dist : depth;
		pixelColor = hit? BRDF(sphere, normalSphere(sphere,ray,dist), lightDirection) : pixelColor;
	}

	imageStore(image, pixelCoords, vec4(pixelColor,1));
}